---
import { cn } from "@/lib/utils";

type Props = {
  data: {
    specialitiesKey: string;
    specialitiesDescription: string;
    specialities: string;
  };
};

const { data } = Astro.props;
---

<>
  <div class="container overflow-hidden font-bold">
    <h2 class="mb-20 text-4xl">{data.specialitiesKey}</h2>
    {
      data.specialities.split("\r\n").map((item, idx) => {
        return (
          <div class={cn("specs-slider relative w-max whitespace-nowrap", idx === 0 ? "" : "reverse")}>
            {Array.from({ length: 2 }).map((_, i) => (
              <p class={cn("relative w-full pr-56 text-9xl will-change-transform", i !== 0 ? "absolute left-full top-0" : "")} data-idx={`${idx}-${i}`}>
                {item}
              </p>
            ))}
          </div>
        );
      })
    }
    <p class="ml-auto w-1/2 pt-40 text-4xl">
      {data.specialitiesDescription}
    </p>
  </div>
  <div class="py-20"></div>
  <div class="h-screen bg-slate-600"></div>
</>

<script>
  const sliders = document.querySelectorAll(".specs-slider") as NodeListOf<HTMLDivElement>;
  let direction = -1;

  function animateSlider(slider: HTMLDivElement, directionMultiplier: number) {
    const firstElement = slider.firstElementChild;
    const lastElement = slider.lastElementChild;
    let xPercent = 0;

    function animate() {
      if (xPercent <= -100) {
        xPercent = 0;
      } else if (xPercent > 0) {
        xPercent = -100;
      }
      gsap.set(firstElement, { xPercent });
      gsap.set(lastElement, { xPercent });
      xPercent += 0.15 * direction * directionMultiplier;
      requestAnimationFrame(animate);
    }

    requestAnimationFrame(animate);
  }

  sliders.forEach((slider) => {
    const isReverse = slider.classList.contains("reverse");
    animateSlider(slider, isReverse ? -1 : 1);
  });

  ScrollTrigger.create({
    trigger: sliders[0].parentElement,
    start: 0,
    end: 0,
    onUpdate: (self) => (direction = self.direction * -1),
  });
</script>
