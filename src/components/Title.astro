---
type Props = {
  data: {
    siteTitleFirst: string;
    siteTitleSecond: string;
    siteDescription: string;
  };
};

const { data } = Astro.props;
---

<>
  <!-- <div class="text-center text-7xl font-bold leading-none tracking-tightest sm:text-8xl lg:text-9xl xl:text-10xl">
    {
      data.siteTitleFirst.split("").map((char) => {
        if (char === char.toUpperCase() && char.match(/[A-Z]/)) {
          return (
            <span id="letter" data-text={char}>
              {char}
            </span>
          );
        } else {
          return char;
        }
      })
    }
  </div> -->
  <div class="flex flex-col items-center justify-center">
    <div class="words inline-block overflow-hidden text-7xl font-bold leading-none tracking-tighter sm:text-8xl lg:text-9xl xl:text-10xl">
      {
        data.siteTitleFirst.split("").map((char) => {
          if (char === char.toUpperCase() && char.match(/[A-Z]/)) {
            return <span class="char stroke inline-block origin-[center_top_0px] will-change-transform">{char}</span>;
          }
          return <span class="char inline-block origin-[center_top_0px] will-change-transform">{char}</span>;
        })
      }
    </div>
    <div class="words inline-block overflow-hidden text-7xl font-bold leading-none tracking-tighter sm:text-8xl lg:text-9xl xl:text-10xl">
      {
        data.siteTitleSecond.split("").map((char) => {
          if (char === char.toUpperCase() && char.match(/[A-Z]/)) {
            return <span class="char stroke inline-block origin-[center_top_0px] will-change-transform">{char}</span>;
          }
          return <span class="char inline-block origin-[center_top_0px] will-change-transform">{char}</span>;
        })
      }
    </div>
  </div>
  <!-- <div class="text-center text-7xl font-bold leading-none tracking-tightest sm:text-8xl lg:text-9xl xl:text-10xl">
    {
      data.siteTitleSecond.split("").map((char) => {
        if (char === char.toUpperCase() && char.match(/[A-Z]/)) {
          return (
            <span id="letter" data-text={char}>
              {char}
            </span>
          );
        } else {
          return char;
        }
      })
    }
  </div> -->
  <h1 class="mt-24 text-balance text-center text-3xl font-bold sm:text-4xl lg:w-1/2 lg:text-left">
    {data.siteDescription}
  </h1>
</>

<style>
  #letter {
    --color: #fff;
    position: relative;
    color: transparent;
  }

  #letter::after {
    content: attr(data-text);
    position: absolute;
    inset: 0;
    z-index: 69;
    -webkit-text-stroke: 1px var(--color);
    line-height: 0.9;
  }

  .stroke {
    -webkit-text-stroke: 1px #fff;
    color: transparent;
  }

  .words {
    transform-style: preserve-3d;
    perspective: 1000px;
  }
</style>

<script>
  import gsap from "gsap";

  // const letters = document.querySelectorAll("#letter") as NodeListOf<HTMLElement>;
  // setTimeout(() => {
  //   gsap.to(
  //     {},
  //     {
  //       duration: 10,
  //       onUpdate: function () {
  //         const progress = this.progress();
  //         letters.forEach((letter) => {
  //           letter.style.color = `hsla(0, 0%, 100%, ${progress})`;
  //         });
  //       },
  //     }
  //   );
  // }, 1000);

  const firstLineChars = document.querySelectorAll(".words:first-of-type .char") as NodeListOf<HTMLElement>;
  const secondLineChars = document.querySelectorAll(".words:last-of-type .char") as NodeListOf<HTMLElement>;
  const tl = gsap.timeline();
  tl.from(firstLineChars, {
    duration: 0.7,
    yPercent: 85,
    opacity: 0,
    rotateX: -90,
    stagger: 0.04,
    ease: "power2.out",
  });
  tl.from(
    secondLineChars,
    {
      duration: 0.7,
      yPercent: 100,
      stagger: 0.06,
      ease: "power2.out",
    },
    "-=0.9"
  );
</script>
